:- module(tbox_writer, [write_tbox/3]).

:- use_module('../core/config', [target/1, tbox_module_name/2, abox_module_name/2, get_kb_specific_options/2]).
:- use_module(predicate_names, [predicate_name/2]).
:- target(swi) -> 
		use_module(prolog_translator_swi_tools, [datime/1])
		; true.
:- target(sicstus) -> 
		use_module(library(system), [datime/1])
		; true.

write_tbox(tbox(TransformedTBox, _EqRoles, _QueryPredicates), URI, Stream) :-
	write_tbox_header(Stream, URI),
	abox_module_name(URI, ABox),
	write_tbox(TransformedTBox, Stream, ABox).
	% , 
	% write(Stream, '\n\n\n/*\n'),
	% write(Stream, 'TransformedTBox:\n'),
	% writeq(Stream, TransformedTBox),
	% write(Stream, '\nEqRoles:\n'),
	% writeq(Stream, EqRoles),
	% write(Stream, '\nQueryPredicates:\n'),
	% writeq(Stream, QueryPredicates),
	% write(Stream, '\n*/\n').
	

write_tbox([], Stream, _ABox) :- nl(Stream).
write_tbox([Predicate|TransformedTBox], Stream, ABox) :-
	write_predicate(Predicate, Stream, ABox),
	write_tbox(TransformedTBox, Stream, ABox).

write_predicate(concept(Concept-[], Description, Clauses), Stream, ABox) :-
	format(Stream, '~n% Clauses of ~a concept ~q:~n', [Description, Concept]),
	write_clauses(Clauses, Stream, ABox).
write_predicate(role(Role-[], Description, Clauses), Stream, ABox) :-
	format(Stream, '~n% Clauses of ~a role ~q:~n', [Description, Role]),
	write_clauses(Clauses, Stream, ABox).

write_clauses([], _Stream, _ABox).
write_clauses([Clause|Clauses], Stream, ABox) :-
	write_clause(Clause, Stream, ABox),
	write_clauses(Clauses, Stream, ABox).

write_clause((HeadName0-HeadVars :- Body0), Stream, ABox) :-
	predicate_name(HeadName0, HeadName),
	Head =.. [HeadName|HeadVars],
	create_body(Body0, Body, ABox),
	portray_clause(Stream, (Head :- Body)).

create_body((Term0, Rest0), (Term, Rest), ABox) :- !,
	create_body(Term0, Term, ABox),
	create_body(Rest0, Rest, ABox).
create_body((A0 ; B0), (A; B), ABox) :- !,
	create_body(A0, A, ABox),
	create_body(B0, B, ABox).
create_body((A0 -> B0), (A -> B), ABox) :- !,
	create_body(A0, A, ABox),
	create_body(B0, B, ABox).
create_body(Term0, Term, ABox) :- 
	replace_term(Term0, Term, ABox).

replace_term(projection(Goals0, HeadVar, Quantifiers), Term, ABox) :-
	create_body(Goals0, Goals1, ABox),
	quantifiers_list(Quantifiers, Goals1, Goals),
	Term = (setof(HeadVar, Goals, L), member(HeadVar, L)).
replace_term(!, !, _ABox).
replace_term(fail, fail, _ABox).
replace_term(true, true, _ABox).
replace_term(nonvar(X), nonvar(X), _ABox).
replace_term(init_state(S), init_state(S), _ABox).
replace_term(new_anc(A, S0, S), new_anc(A, S0, S), _ABox).
replace_term(check_anc(A, S), check_anc(A, S), _ABox).
replace_term(new_loop(A, S0, S), new_loop(A, S0, S), _ABox).
replace_term(check_loop(A, S), check_loop(A, S), _ABox).
replace_term(new_state(A, S0, S), new_state(A, S0, S), _ABox).
replace_term(Name0-Args, Term, ABox) :-
	(	Name0 = abox(Name1)
	->	predicate_name(Name1, Name),
		Term0 =.. [Name|Args],
		Term = ABox:Term0
	;	predicate_name(Name0, Name),
		Term =.. [Name|Args]
	).

quantifiers_list([], Goal, Goal).
quantifiers_list([V|Qs], Goal0, V^Goal) :-
	quantifiers_list(Qs, Goal0, Goal).


write_tbox_header(Stream, URI) :- 
	datime(datime(Year, Month, Day, Hour, Min, Sec)),
	get_kb_specific_options(URI, Options),	
	write(Stream, '%%\\ Automatically generated by the DLog system.\n'),
	write(Stream, '%%\\ Budapest University of Technology and Economic (BME), 2007-2008.\n'),
	format(Stream, '%%\\ User defined options: ~p ~n', [Options]), 
	format(Stream, '%%\\ Timestamp: ~d.~d.~d, ~d:~d:~d sec ~n~n',[Year, Month, Day, Hour, Min, Sec]),
	tbox_module_name(URI, MName),
	format(Stream, ':- module(\'~w\',[]).\n',[MName]),

	write(Stream, '\n% ************************\n'),
	write(Stream,   '% Header\n'),
	write(Stream,   '% ************************\n\n'),
        %TODO: dmiles confirm this is still OK
        format(Stream,':- set_prolog_flag(unknown,warning).\n',[]),
        %TODO: dmiles confirm this is still OK
        format(Stream,':- style_check(-discontiguous).\n',[]),
	portray_clause(Stream, (
		sicstus_init :-
			use_module(library(lists), [member/2]),
			use_module(dlog_hash, dlog_hash, [init_state/1,new_state/3,new_anc/3,new_loop/3,check_anc/2,check_loop/2])
			)),
	nl(Stream),
	portray_clause(Stream, (
		swi_init :-
			open_resource(dlog_hash, module, H)
			->
			call_cleanup(
				load_files(dlog_hash, [stream(H)]),
				close(H)
			),
			import(lists:member/2)
			;
			use_module(dlog_hash),
			use_module(library(lists), [member/2])
		)),
	nl(Stream),
	portray_clause(Stream, (
		:- current_predicate(config:target/1)
			->
			(config:target(sicstus) -> sicstus_init ; true),
			(config:target(swi) -> swi_init ; true)
			;
			(current_prolog_flag(dialect, swi) -> swi_init
			; %current_prolog_flag(language, sicstus) %sicstus/iso
			sicstus_init)
		)),
	nl(Stream).